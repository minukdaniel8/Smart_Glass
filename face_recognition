import cv2
from picamera2 import Picamera2
import pandas as pd
from ultralytics import YOLO
import cvzone
import numpy as np
from deepface import DeepFace

# Initialize Picamera2
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)
picam2.preview_configuration.main.format = "RGB888"
picam2.preview_configuration.align()
picam2.configure("preview")
picam2.start()

# Load YOLO model
model = YOLO('yolov8n.pt')

# Load class names
with open("coco.txt", "r") as my_file:
    class_list = my_file.read().split("\n")

# Path to the database of known faces
database_path = "faces_database"

# Define tolerance
tolerance = 0.9

count = 0

while True:
    im = picam2.capture_array()
    
    count += 1
    if count % 3 != 0:
        continue
    
    im = cv2.flip(im, -1)
    results = model.predict(im)
    a = results[0].boxes.data
    px = pd.DataFrame(a).astype("float")
    
    for index, row in px.iterrows():
        x1 = int(row[0])
        y1 = int(row[1])
        x2 = int(row[2])
        y2 = int(row[3])
        d = int(row[5])
        c = class_list[d]
        
        # Draw rectangle and label
        cv2.rectangle(im, (x1, y1), (x2, y2), (0, 0, 255), 2)
        cvzone.putTextRect(im, f'{c}', (x1, y1), 1, 1)
        
        # If person is detected, perform face recognition
        if c == "person":
            face_crop = im[y1:y2, x1:x2]
            try:
                results = DeepFace.find(img_path=face_crop, db_path=database_path, model_name='VGG-Face', distance_metric='cosine', enforce_detection=False)
                if len(results) > 0:
                    best_match = results[0].iloc[0]
                    distance = best_match['VGG-Face_cosine']
                    if distance < tolerance:
                        identity = best_match['identity'].split('/')[-2]  # Get the directory name as identity
                        cvzone.putTextRect(im, identity, (x1, y1 - 10), 1, 1)
                    else:
                        cvzone.putTextRect(im, "Unknown", (x1, y1 - 10), 1, 1)
                else:
                    cvzone.putTextRect(im, "Unknown", (x1, y1 - 10), 1, 1)
            except Exception as e:
                print(f"DeepFace error: {e}")
    
    # Display the image
    cv2.imshow("Camera", im)
    if cv2.waitKey(1) == ord('q'):
        break

cv2.destroyAllWindows()
